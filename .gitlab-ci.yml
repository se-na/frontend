stages:
  - build
  - test
  - docker-build
  - deploy

build:
  stage: build
  image: node
  script: 
    - echo "Start building App"
    - npm install
    - npm build
    - echo "Build successfully!"
  artifacts:
    expire_in: 1 hour
    paths:
      - build
      - node_modules/

test:
  stage: test
  image: node
  script:
    - echo "Testing App"
    - CI=true npm test
    - echo "Test successfully!"

docker-build:
  stage: docker-build
  image: docker:latest
  services: 
    - name: docker:19.03.8-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"

deploy:
  stage: deploy
  image: kroniak/ssh-client
  only:
    refs:
      - master
  before_script:
    - echo "deploying app"
  script:
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > key.pem
    - chmod 400 key.pem
    - ssh -o StrictHostKeyChecking=no -i key.pem root@152.96.56.12 "docker stop frontendcontainer || true && docker rm frontendcontainer || true"
    - ssh -o StrictHostKeyChecking=no -i key.pem root@152.96.56.12 "cd ~/sa-monitoring-osm-frontend/; git pull https://$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD@gitlab.dev.ifs.hsr.ch/se-na/sa-monitoring-osm-frontend.git"
    - ssh -o StrictHostKeyChecking=no -i key.pem root@152.96.56.12 "cd :~/sa-monitoring-osm-frontend/; docker build --tag targetedmonitoring:1.0 ~/sa-monitoring-osm-frontend"
    - ssh -o StrictHostKeyChecking=no -i key.pem root@152.96.56.12 "docker run -p 40000:80 -d --name frontendcontainer targetedmonitoring:1.0"
    - echo "Is running on 152.96.56.12:40000"